{"version":3,"file":"static/js/341.e2b9f7c1.chunk.js","mappings":"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","sources":["stats/ui/DownloadChart.tsx","stats/ui/DownloadsDialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport {IDataFrame} from 'data-forge';\nimport Measure, {ContentRect} from 'react-measure';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst Plotly = require('plotly.js-basic-dist');\nconst Plot = createPlotlyComponent(Plotly);\n\ninterface DownloadChartProps {\n  downloadsDf: IDataFrame;\n\n  repositoryName: string;\n\n  variant: 'count' | 'delta';\n}\n\ninterface DownloadChartState {\n  width: number;\n\n  height: number;\n}\n\nclass DownloadChart extends React.Component<DownloadChartProps, DownloadChartState> {\n  onResize = (dimensions: ContentRect) => {\n    const bounds = dimensions.bounds;\n    if (!bounds) {\n      return;\n    }\n    this.setState({\n      width: bounds.width,\n      height: bounds.height,\n    });\n  };\n\n  render(): React.ReactNode {\n    const repositoryName = this.props.repositoryName;\n\n    const variant = this.props.variant;\n\n    const columnName = variant === 'count' ? 'downloads_count' : 'downloads_delta';\n    const variantLabel = variant === 'count' ? 'Download count' : 'Downloads / day';\n\n    const downloadsDf = this.props.downloadsDf\n      .where(row => row.repository_name === repositoryName)\n      .setIndex('data_at')\n      .subset([columnName]);\n\n    // eslint-disable-next-line no-undef\n    const data: Plotly.Data[] = [\n      {\n        x: downloadsDf.getIndex().toArray(),\n        y: downloadsDf.getSeries(columnName).toArray(),\n        type: 'scatter',\n      },\n    ];\n    return (\n      <Measure bounds onResize={this.onResize}>\n        {({measureRef}) => {\n          const state: DownloadChartState = this.state || {\n            width: 800,\n            height: 600,\n          };\n          // eslint-disable-next-line no-undef\n          const layout: Partial<Plotly.Layout> = {\n            width: state.width,\n            height: state.height,\n            title: repositoryName,\n            xaxis: {title: 'Date'},\n            yaxis: {title: variantLabel},\n          };\n          return (\n            <div ref={measureRef} style={{height: '100%'}}>\n              <Plot data={data} layout={layout} />\n            </div>\n          );\n        }}\n      </Measure>\n    );\n  }\n}\n\nexport default DownloadChart;\n","import * as React from 'react';\nimport {\n  AppBar,\n  Dialog,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  MuiThemeProvider,\n  Select,\n  Slide,\n  Theme,\n  Toolbar,\n  withStyles,\n  WithStyles,\n} from '@material-ui/core';\nimport {TransitionProps} from '@material-ui/core/transitions';\nimport {DownloadSnapshot} from '../model/DownloadSnapshot';\nimport * as DataForge from 'data-forge';\nimport {IDataFrame} from 'data-forge';\nimport DownloadChart from './DownloadChart';\nimport {darkTheme} from './App';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {StyleRules} from '@material-ui/core/styles';\n\ninterface DownloadsDialogProps extends WithStyles {\n  repositoryName: string | null;\n\n  downloads: DownloadSnapshot[];\n\n  open: boolean;\n\n  onClose?: React.ReactEventHandler<{}>;\n}\n\ninterface DownloadsDialogState {\n  repositoryName?: string | null;\n\n  variant: 'count' | 'delta';\n}\n\nfunction DialogTransition(props: TransitionProps) {\n  return <Slide direction=\"up\" {...props} />;\n}\n\nclass DownloadsDialogBase extends React.Component<DownloadsDialogProps, DownloadsDialogState> {\n  componentDidMount(): void {\n    this.setState({\n      repositoryName: this.props.repositoryName,\n      variant: 'count',\n    });\n  }\n\n  componentDidUpdate(prevProps: Readonly<DownloadsDialogProps>): void {\n    if (prevProps.repositoryName !== this.props.repositoryName) {\n      this.setState({\n        repositoryName: this.props.repositoryName,\n        variant: 'count',\n      });\n    }\n  }\n\n  repoChanged = (event: React.ChangeEvent<{name?: string; value: unknown}>) => {\n    const state = this.state;\n    if (!state) {\n      return;\n    }\n    const repositoryName = String(event.target.value);\n    const variant = state.variant;\n\n    this.setState({\n      repositoryName,\n      variant,\n    });\n  };\n\n  variantChanged = (event: React.ChangeEvent<{name?: string; value: unknown}>) => {\n    const state = this.state;\n    if (!state) {\n      return;\n    }\n    const repositoryName = state.repositoryName;\n    const variant: 'count' | 'delta' = event.target.value === 'count' ? 'count' : 'delta';\n\n    this.setState({\n      repositoryName,\n      variant,\n    });\n  };\n\n  render(): React.ReactNode {\n    const state = this.state;\n    if (!state) {\n      return <></>;\n    }\n\n    const downloads = this.props.downloads;\n\n    const repositoryName = state.repositoryName || '';\n    const variant = state.variant;\n\n    const downloadsDf: IDataFrame = new DataForge.DataFrame({\n      values: downloads,\n    }).parseDates(['data_at']);\n\n    const repoNames: string[] = downloadsDf\n      .getSeries('repository_name')\n      .distinct()\n      .toArray()\n      .sort((nameA: string, nameB: string): number => {\n        const nameNormA = nameA.replace('_', '-');\n        const nameNormB = nameB.replace('_', '-');\n        return nameNormA.localeCompare(nameNormB);\n      });\n\n    const open = this.props.open;\n\n    const classes = this.props.classes;\n\n    return (\n      <Dialog open={open} fullScreen={true} TransitionComponent={DialogTransition}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <MuiThemeProvider theme={darkTheme}>\n              <IconButton aria-label=\"Close\" className={classes.closeButton} onClick={this.props.onClose}>\n                <CloseIcon />\n              </IconButton>\n              <InputLabel htmlFor=\"repo\">Repository</InputLabel>&nbsp;\n              <Select\n                value={repositoryName}\n                onChange={this.repoChanged}\n                inputProps={{\n                  name: 'repo',\n                  id: 'repo',\n                }}\n              >\n                {repoNames.map(name => (\n                  <MenuItem key={name} value={name}>\n                    {name}\n                  </MenuItem>\n                ))}\n              </Select>\n              &nbsp;&nbsp;\n              <InputLabel htmlFor=\"variant\">View</InputLabel>&nbsp;\n              <Select\n                value={variant}\n                onChange={this.variantChanged}\n                inputProps={{\n                  name: 'variant',\n                  id: 'variant',\n                }}\n              >\n                <MenuItem value=\"count\">Download count</MenuItem>\n                <MenuItem value=\"delta\">Downloads / day</MenuItem>\n              </Select>\n            </MuiThemeProvider>\n          </Toolbar>\n        </AppBar>\n        {(() => {\n          if (!repositoryName) {\n            return <></>;\n          }\n          return <DownloadChart downloadsDf={downloadsDf} repositoryName={repositoryName} variant={variant} />;\n        })()}\n      </Dialog>\n    );\n  }\n}\n\nconst styles = (theme: Theme): StyleRules => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n  },\n});\nconst DownloadsDialog = withStyles(styles)(DownloadsDialogBase);\n\nexport default DownloadsDialog;\n"],"names":["Plotly","require","Plot","createPlotlyComponent","DownloadChart","onResize","dimensions","bounds","setState","width","height","repositoryName","this","props","variant","columnName","variantLabel","downloadsDf","where","row","repository_name","setIndex","subset","data","x","getIndex","toArray","y","getSeries","type","measureRef","state","layout","title","xaxis","yaxis","ref","style","React","DialogTransition","Slide","direction","DownloadsDialogBase","repoChanged","event","String","target","value","variantChanged","prevProps","downloads","DataForge","values","parseDates","repoNames","distinct","sort","nameA","nameB","nameNormA","replace","nameNormB","localeCompare","open","classes","Dialog","fullScreen","TransitionComponent","AppBar","position","Toolbar","theme","darkTheme","IconButton","className","closeButton","onClick","onClose","Close","InputLabel","htmlFor","Select","onChange","inputProps","name","id","map","MenuItem","withStyles","right","spacing","top"],"sourceRoot":""}