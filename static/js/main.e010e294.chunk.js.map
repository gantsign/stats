{"version":3,"sources":["stats/service/StatsService.ts","stats/ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["getSummary","Axios","get","getDownloads","SummaryTable","React","lazy","DownloadsDialog","library","add","faChartLine","App","Component","showChart","repositoryName","console","log","state","this","summary","downloads","setState","showDownloadChart","dialogClosed","componentDidMount","a","summaryPromise","StatsService","downloadsPromise","summaryResponse","status","statusText","data","errorMessage","downloadsResponse","render","fallback","onShowDownloadsChart","open","onClose","darkTheme","createMuiTheme","palette","type","parseIsoDateToMillis","value","Date","parse","reformatIsoAsLocaleDate","toLocaleDateString","reformatIsoAsLocaleDatetime","date","toLocaleTimeString","toLocaleString","undefined","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+VAce,UAVf,MACEA,aACE,OAAOC,IAAMC,IAAI,qBAGnBC,eACE,OAAOF,IAAMC,IAAI,yB,OCDrB,MAAME,EAAeC,IAAMC,MAAK,IAAM,6DAChCC,EAAkBF,IAAMC,MAAK,IAAM,6DAEzCE,IAAQC,IAAIC,KAcZ,MAAMC,UAAYN,IAAMO,UAAyB,eAAD,oBAmC9CC,UAAaC,IACXC,QAAQC,IAAIF,GACZ,MAAMG,EAAQC,KAAKD,MACbE,EAAUF,EAAQA,EAAME,QAAU,KAClCC,EAAYH,EAAQA,EAAMG,UAAY,GAE5CF,KAAKG,SAAS,CACZD,YACAD,UACAG,mBAAmB,EACnBR,oBA7C0C,KAiD9CS,aAAe,KACb,MAAMN,EAAQC,KAAKD,MACbE,EAAUF,EAAQA,EAAME,QAAU,KAClCC,EAAYH,EAAQA,EAAMG,UAAY,GACtCN,EAAiBG,EAAMH,eAE7BI,KAAKG,SAAS,CACZD,YACAD,UACAG,mBAAmB,EACnBR,oBA1DJU,oBAA2B,IAAD,OACxB,sBAAC,kCAAAC,EAAA,6DACOC,EAAiBC,EAAa3B,aAC9B4B,EAAmBD,EAAaxB,eAFvC,SAIuDuB,EAJvD,UAKgC,OADzBG,EAJP,QAKqBC,OALrB,uBAMGf,QAAQC,IAAR,mCAC8Ba,EAAgBC,OAD9C,YACwDD,EAAgBE,WADxE,aACuFF,EAAgBG,OAEvG,EAAKX,SAAS,CACZY,aAAc,8DAVnB,2CAeoEL,EAfpE,WAgBkC,OAD3BM,EAfP,QAgBuBJ,OAhBvB,wBAiBGf,QAAQC,IAAR,qCACgCkB,EAAkBJ,OADlD,YAC4DI,EAAkBH,WAD9E,aAC6FG,EAAkBF,OAE/G,EAAKX,SAAS,CACZY,aAAc,8DArBnB,2BA0BC,EAAKZ,SAAS,CACZF,QAASU,EAAgBG,KACzBZ,UAAWc,EAAkBF,OA5BhC,2CAAD,GA6DFG,SACE,MAAMlB,EAAQC,KAAKD,MACnB,IAAKA,EACH,OAAO,6CAET,MAAMgB,EAAehB,EAAMgB,aAC3B,GAAIA,EACF,OAAO,8BAAMA,IAEf,MAAMd,EAAUF,EAAME,SAAW,KAC3BC,EAAYH,EAAMG,WAAa,GACrC,IAAKD,EACH,OAAO,6CAGT,MAAML,EAAiBG,EAAMH,gBAAkB,KACzCQ,EAAoBL,EAAMK,oBAAqB,EAErD,OACE,qCACE,cAAC,WAAD,CAAUc,SAAU,6CAApB,SACE,cAAChC,EAAD,CAAce,QAASA,EAASkB,qBAAsBvB,GAAkBI,KAAKL,UAAUC,OAEzF,cAAC,WAAD,CAAUsB,SAAU,6BAApB,SACE,cAAC7B,EAAD,CACE+B,KAAMhB,EACNF,UAAWA,EACXN,eAAgBA,EAChByB,QAASrB,KAAKK,qBAQnB,MAAMiB,EAAYC,YAAe,CACtCC,QAAS,CACPC,KAAM,UAIGC,EAAwBC,GAC9BA,EAGEC,KAAKC,MAAMF,GAFT,KAKEG,EAA2BH,GACjCA,EAGE,IAAIC,KAAKD,GAAOI,qBAFd,GAKEC,EAA+BL,IAC1C,IAAKA,EACH,MAAO,GAET,MAAMM,EAAO,IAAIL,KAAKD,GACtB,MAAM,GAAN,OAAUM,EAAKF,qBAAf,YAAuCE,EAAKC,uBAGjCC,EAAkBR,GACf,OAAVA,QAA4BS,IAAVT,EACb,GAEFA,EAAMQ,iBAGA1C,O,sGCpJK4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,WCXnCC,IAASzB,OAAO,cAACxB,EAAA,EAAD,IAASkD,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAKC,IACjCA,EAAaC,kB","file":"static/js/main.e010e294.chunk.js","sourcesContent":["import Axios, {AxiosResponse} from 'axios';\nimport {Summary} from '../model/Summary';\nimport {DownloadSnapshot} from '../model/DownloadSnapshot';\n\nclass StatsService {\n  getSummary(): Promise<AxiosResponse<Summary>> {\n    return Axios.get('data/summary.json');\n  }\n\n  getDownloads(): Promise<AxiosResponse<DownloadSnapshot[]>> {\n    return Axios.get('data/downloads.json');\n  }\n}\n\nexport default new StatsService();\n","import React, {Suspense} from 'react';\nimport {createMuiTheme} from '@material-ui/core';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faChartLine} from '@fortawesome/free-solid-svg-icons';\nimport {AxiosResponse} from 'axios';\nimport {Summary} from '../model/Summary';\nimport StatsService from '../service/StatsService';\nimport {DownloadSnapshot} from '../model/DownloadSnapshot';\n\nconst SummaryTable = React.lazy(() => import('./SummaryTable'));\nconst DownloadsDialog = React.lazy(() => import('./DownloadsDialog'));\n\nlibrary.add(faChartLine);\n\ninterface AppState {\n  summary?: Summary | null;\n\n  downloads?: DownloadSnapshot[];\n\n  showDownloadChart?: boolean;\n\n  repositoryName?: string;\n\n  errorMessage?: string;\n}\n\nclass App extends React.Component<{}, AppState> {\n  componentDidMount(): void {\n    (async () => {\n      const summaryPromise = StatsService.getSummary();\n      const downloadsPromise = StatsService.getDownloads();\n\n      const summaryResponse: AxiosResponse<Summary> = await summaryPromise;\n      if (summaryResponse.status !== 200) {\n        console.log(\n          `Summary request failed: [${summaryResponse.status} ${summaryResponse.statusText}] ${summaryResponse.data}`\n        );\n        this.setState({\n          errorMessage: 'Unable to access repository data, please try again later.',\n        });\n        return;\n      }\n\n      const downloadsResponse: AxiosResponse<DownloadSnapshot[]> = await downloadsPromise;\n      if (downloadsResponse.status !== 200) {\n        console.log(\n          `Downloads request failed: [${downloadsResponse.status} ${downloadsResponse.statusText}] ${downloadsResponse.data}`\n        );\n        this.setState({\n          errorMessage: 'Unable to access repository data, please try again later.',\n        });\n        return;\n      }\n\n      this.setState({\n        summary: summaryResponse.data,\n        downloads: downloadsResponse.data,\n      });\n    })();\n  }\n\n  showChart = (repositoryName: string) => {\n    console.log(repositoryName);\n    const state = this.state;\n    const summary = state ? state.summary : null;\n    const downloads = state ? state.downloads : [];\n\n    this.setState({\n      downloads,\n      summary,\n      showDownloadChart: true,\n      repositoryName,\n    });\n  };\n\n  dialogClosed = () => {\n    const state = this.state;\n    const summary = state ? state.summary : null;\n    const downloads = state ? state.downloads : [];\n    const repositoryName = state.repositoryName;\n\n    this.setState({\n      downloads,\n      summary,\n      showDownloadChart: false,\n      repositoryName,\n    });\n  };\n\n  render() {\n    const state = this.state;\n    if (!state) {\n      return <div>Loading...</div>;\n    }\n    const errorMessage = state.errorMessage;\n    if (errorMessage) {\n      return <div>{errorMessage}</div>;\n    }\n    const summary = state.summary || null;\n    const downloads = state.downloads || [];\n    if (!summary) {\n      return <div>Loading...</div>;\n    }\n\n    const repositoryName = state.repositoryName || null;\n    const showDownloadChart = state.showDownloadChart || false;\n\n    return (\n      <>\n        <Suspense fallback={<div>Loading...</div>}>\n          <SummaryTable summary={summary} onShowDownloadsChart={repositoryName => this.showChart(repositoryName)} />\n        </Suspense>\n        <Suspense fallback={<></>}>\n          <DownloadsDialog\n            open={showDownloadChart}\n            downloads={downloads}\n            repositoryName={repositoryName}\n            onClose={this.dialogClosed}\n          />\n        </Suspense>\n      </>\n    );\n  }\n}\n\nexport const darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nexport const parseIsoDateToMillis = (value: string | null | undefined): number | null => {\n  if (!value) {\n    return null;\n  }\n  return Date.parse(value);\n};\n\nexport const reformatIsoAsLocaleDate = (value: string | null | undefined): string => {\n  if (!value) {\n    return '';\n  }\n  return new Date(value).toLocaleDateString();\n};\n\nexport const reformatIsoAsLocaleDatetime = (value: string | null | undefined): string => {\n  if (!value) {\n    return '';\n  }\n  const date = new Date(value);\n  return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n};\n\nexport const toLocaleString = (value: number | null | undefined): string => {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  return value.toLocaleString();\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './stats/ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}