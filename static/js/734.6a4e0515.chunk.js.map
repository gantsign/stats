{"version":3,"file":"static/js/734.6a4e0515.chunk.js","mappings":"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","sources":["stats/ui/DownloadChart.tsx","stats/ui/DownloadsDialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport {IDataFrame} from 'data-forge';\nimport Measure, {ContentRect} from 'react-measure';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst Plotly = require('plotly.js-basic-dist');\nconst Plot = createPlotlyComponent(Plotly);\n\ninterface DownloadChartProps {\n  downloadsDf: IDataFrame;\n\n  repositoryName: string;\n\n  variant: 'count' | 'delta';\n}\n\ninterface DownloadChartState {\n  width: number;\n\n  height: number;\n}\n\nclass DownloadChart extends React.Component<DownloadChartProps, DownloadChartState> {\n  onResize = (dimensions: ContentRect) => {\n    const bounds = dimensions.bounds;\n    if (!bounds) {\n      return;\n    }\n    this.setState({\n      width: bounds.width,\n      height: bounds.height,\n    });\n  };\n\n  render(): React.ReactNode {\n    const repositoryName = this.props.repositoryName;\n\n    const variant = this.props.variant;\n\n    const columnName = variant === 'count' ? 'downloads_count' : 'downloads_delta';\n    const variantLabel = variant === 'count' ? 'Download count' : 'Downloads / day';\n\n    const downloadsDf = this.props.downloadsDf\n      .where(row => row.repository_name === repositoryName)\n      .setIndex('data_at')\n      .subset([columnName]);\n\n    // eslint-disable-next-line no-undef\n    const data: Plotly.Data[] = [\n      {\n        x: downloadsDf.getIndex().toArray(),\n        y: downloadsDf.getSeries(columnName).toArray(),\n        type: 'scatter',\n      },\n    ];\n    return (\n      <Measure bounds onResize={this.onResize}>\n        {({measureRef}) => {\n          const state: DownloadChartState = this.state || {\n            width: 800,\n            height: 600,\n          };\n          // eslint-disable-next-line no-undef\n          const layout: Partial<Plotly.Layout> = {\n            width: state.width,\n            height: state.height,\n            title: repositoryName,\n            xaxis: {title: 'Date'},\n            yaxis: {title: variantLabel},\n          };\n          return (\n            <div ref={measureRef} style={{height: '100%'}}>\n              <Plot data={data} layout={layout} />\n            </div>\n          );\n        }}\n      </Measure>\n    );\n  }\n}\n\nexport default DownloadChart;\n","import * as React from 'react';\nimport {\n  AppBar,\n  Dialog,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  MuiThemeProvider,\n  Select,\n  Slide,\n  Theme,\n  Toolbar,\n  withStyles,\n  WithStyles,\n} from '@material-ui/core';\nimport {TransitionProps} from '@material-ui/core/transitions';\nimport {DownloadSnapshot} from '../model/DownloadSnapshot';\nimport * as DataForge from 'data-forge';\nimport {IDataFrame} from 'data-forge';\nimport DownloadChart from './DownloadChart';\nimport {darkTheme} from './App';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {StyleRules} from '@material-ui/core/styles';\n\ninterface DownloadsDialogProps extends WithStyles {\n  repositoryName: string | null;\n\n  downloads: DownloadSnapshot[];\n\n  open: boolean;\n\n  onClose?: React.ReactEventHandler<{}>;\n}\n\ninterface DownloadsDialogState {\n  repositoryName?: string | null;\n\n  variant: 'count' | 'delta';\n}\n\nfunction DialogTransition(props: TransitionProps) {\n  return <Slide direction=\"up\" {...props} />;\n}\n\nclass DownloadsDialogBase extends React.Component<DownloadsDialogProps, DownloadsDialogState> {\n  componentDidMount(): void {\n    this.setState({\n      repositoryName: this.props.repositoryName,\n      variant: 'count',\n    });\n  }\n\n  componentDidUpdate(prevProps: Readonly<DownloadsDialogProps>): void {\n    if (prevProps.repositoryName !== this.props.repositoryName) {\n      this.setState({\n        repositoryName: this.props.repositoryName,\n        variant: 'count',\n      });\n    }\n  }\n\n  repoChanged = (event: React.ChangeEvent<{name?: string; value: unknown}>) => {\n    const state = this.state;\n    if (!state) {\n      return;\n    }\n    const repositoryName = String(event.target.value);\n    const variant = state.variant;\n\n    this.setState({\n      repositoryName,\n      variant,\n    });\n  };\n\n  variantChanged = (event: React.ChangeEvent<{name?: string; value: unknown}>) => {\n    const state = this.state;\n    if (!state) {\n      return;\n    }\n    const repositoryName = state.repositoryName;\n    const variant: 'count' | 'delta' = event.target.value === 'count' ? 'count' : 'delta';\n\n    this.setState({\n      repositoryName,\n      variant,\n    });\n  };\n\n  render(): React.ReactNode {\n    const state = this.state;\n    if (!state) {\n      return <></>;\n    }\n\n    const downloads = this.props.downloads;\n\n    const repositoryName = state.repositoryName || '';\n    const variant = state.variant;\n\n    const downloadsDf: IDataFrame = new DataForge.DataFrame({\n      values: downloads,\n    }).parseDates(['data_at']);\n\n    const repoNames: string[] = downloadsDf\n      .getSeries('repository_name')\n      .distinct()\n      .toArray()\n      .sort((nameA: string, nameB: string): number => {\n        const nameNormA = nameA.replace('_', '-');\n        const nameNormB = nameB.replace('_', '-');\n        return nameNormA.localeCompare(nameNormB);\n      });\n\n    const open = this.props.open;\n\n    const classes = this.props.classes;\n\n    return (\n      <Dialog open={open} fullScreen={true} TransitionComponent={DialogTransition}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <MuiThemeProvider theme={darkTheme}>\n              <IconButton aria-label=\"Close\" className={classes.closeButton} onClick={this.props.onClose}>\n                <CloseIcon />\n              </IconButton>\n              <InputLabel htmlFor=\"repo\">Repository</InputLabel>&nbsp;\n              <Select\n                value={repositoryName}\n                onChange={this.repoChanged}\n                inputProps={{\n                  name: 'repo',\n                  id: 'repo',\n                }}\n              >\n                {repoNames.map(name => (\n                  <MenuItem key={name} value={name}>\n                    {name}\n                  </MenuItem>\n                ))}\n              </Select>\n              &nbsp;&nbsp;\n              <InputLabel htmlFor=\"variant\">View</InputLabel>&nbsp;\n              <Select\n                value={variant}\n                onChange={this.variantChanged}\n                inputProps={{\n                  name: 'variant',\n                  id: 'variant',\n                }}\n              >\n                <MenuItem value=\"count\">Download count</MenuItem>\n                <MenuItem value=\"delta\">Downloads / day</MenuItem>\n              </Select>\n            </MuiThemeProvider>\n          </Toolbar>\n        </AppBar>\n        {(() => {\n          if (!repositoryName) {\n            return <></>;\n          }\n          return <DownloadChart downloadsDf={downloadsDf} repositoryName={repositoryName} variant={variant} />;\n        })()}\n      </Dialog>\n    );\n  }\n}\n\nconst styles = (theme: Theme): StyleRules => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n  },\n});\nconst DownloadsDialog = withStyles(styles)(DownloadsDialogBase);\n\nexport default DownloadsDialog;\n"],"names":["Plotly","require","Plot","createPlotlyComponent","DownloadChart","React","constructor","arguments","onResize","dimensions","bounds","this","setState","width","height","render","repositoryName","props","variant","columnName","variantLabel","downloadsDf","where","row","repository_name","setIndex","subset","data","x","getIndex","toArray","y","getSeries","type","_jsx","Measure","children","_ref","measureRef","state","layout","title","xaxis","yaxis","ref","style","DialogTransition","Slide","direction","DownloadsDialogBase","repoChanged","event","String","target","value","variantChanged","componentDidMount","componentDidUpdate","prevProps","_Fragment","downloads","DataForge","values","parseDates","repoNames","distinct","sort","nameA","nameB","nameNormA","replace","nameNormB","localeCompare","open","classes","_jsxs","Dialog","fullScreen","TransitionComponent","AppBar","position","Toolbar","MuiThemeProvider","theme","darkTheme","IconButton","className","closeButton","onClick","onClose","CloseIcon","InputLabel","htmlFor","Select","onChange","inputProps","name","id","map","MenuItem","withStyles","right","spacing","top"],"sourceRoot":""}