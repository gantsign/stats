{"version":3,"sources":["stats/service/StatsService.ts","stats/ui/summarytable/SummaryTable.tsx","stats/ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["service_StatsService","Axios","get","Column","id","name","numeric","accessor","linkAccessor","comparator","totalAccessor","totalLinkAccessor","Object","classCallCheck","this","columns","repo","url","a","b","nameA","replace","nameB","localeCompare","reformatIsoAsLocaleDate","created_at","parseIsoDateToMillis","summary","concat","repositories","length","toLocaleString","open_issues_count","open_issues_url","total_open_issues_count","total_open_issues_url","open_pull_requests_count","open_pull_requests_url","total_open_pull_requests_count","total_open_pull_requests_url","latest_release_version","latest_release_url","latestReleaseVersionA","latestReleaseVersionB","Semver","compare","latest_release_at","commits_since_release","commits_since_release_url","total_commits_since_release","stargazers_count","stargazers_url","total_stargazers_count","downloads_count","downloads_url","total_downloads_count","columnMapping","reduce","map","column","TotalRowBase","props","classes","react_default","createElement","index_es","className","totals","key","filter","contents","totalLink","href","align","React","Component","TotalRow","withStyles","theme","backgroundColor","palette","grey","fontWeight","typography","caption","color","textDecoration","&:focus, &:visited, &:link, &:active","&:hover","SummaryTableBase","sortBy","columnId","currentOrderBy","_this","state","orderBy","currentOrder","order","setState","_this2","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","StatsService","getSummary","sent","status","data","stop","_this3","sortedRepositories","toConsumableArray","sort","reverse","root","padding","styles","darkTheme","header","colSpan","title","subtitle","reformatIsoAsLocaleDatetime","data_at","sortDirection","tooltipPlacement","sortActive","placement","enterDelay","active","direction","onClick","repository","row","link","bodyLink","SummaryTable","overflowX","&:nth-of-type(odd)","background","default","primary","dark","fontSize","fontFamily","lineHeight","common","white","body1","App","summarytable_SummaryTable","createMuiTheme","type","value","Date","parse","toLocaleDateString","date","toLocaleTimeString","undefined","Boolean","window","location","hostname","match","ReactDOM","render","ui_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qUASeA,EAAA,yGAJP,OAAOC,IAAMC,IAAI,+BC2BnBC,EACF,SAAAA,EACiBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACdC,OAAAC,EAAA,EAAAD,CAAAE,KAAAX,GAAAW,KAAAV,KAAAU,KAAAT,OAAAS,KAAAR,UAAAQ,KAAAP,WAAAO,KAAAN,eAAAM,KAAAL,aAAAK,KAAAJ,gBAAAI,KAAAH,qBAIDI,EAAoB,CACtB,IAAIZ,EACI,OACA,QACA,EACA,SAACa,GACG,OAAOA,EAAKX,MAEhB,SAACW,GACG,OAAOA,EAAKC,KAEhB,SAACC,EAAsBC,GACnB,IAAMC,EAAQF,EAAEb,KAAKgB,QAAQ,IAAK,KAC5BC,EAAQH,EAAEd,KAAKgB,QAAQ,IAAK,KAClC,OAAOD,EAAMG,cAAcD,IAE/B,WACI,MAAO,IAEX,WACI,OAAO,OAGnB,IAAInB,EACI,YACA,WACA,EACA,SAACa,GACG,OAAOQ,EAAwBR,EAAKS,aAExC,WACI,OAAO,MAEX,SAACP,EAAsBC,GAGnB,OAFmBO,EAAqBR,EAAEO,aAAe,IACtCC,EAAqBP,EAAEM,aAAe,IAG7D,SAACE,GACG,SAAAC,OAAUD,EAAQE,aAAaC,OAA/B,cAEJ,SAACH,GACG,OAAOA,EAAQV,MAG3B,IAAId,EACI,kBACA,eACA,EACA,SAACa,GACG,OAAOe,EAAef,EAAKgB,oBAE/B,SAAChB,GACG,OAAOA,EAAKiB,iBAEhB,SAACf,EAAsBC,GAGnB,OAFyBD,EAAEc,mBAAqB,IACvBb,EAAEa,mBAAqB,IAGpD,SAACL,GACG,OAAOI,EAAeJ,EAAQO,0BAElC,SAACP,GACG,OAAOA,EAAQQ,wBAG3B,IAAIhC,EACI,wBACA,YACA,EACA,SAACa,GACG,OAAOe,EAAef,EAAKoB,2BAE/B,SAACpB,GACG,OAAOA,EAAKqB,wBAEhB,SAACnB,EAAsBC,GAGnB,OAF+BD,EAAEkB,0BAA4B,IAC9BjB,EAAEiB,0BAA4B,IAGjE,SAACT,GACG,OAAOI,EAAeJ,EAAQW,iCAElC,SAACX,GACG,OAAOA,EAAQY,+BAG3B,IAAIpC,EACI,uBACA,WACA,EACA,SAACa,GACG,OAAOA,EAAKwB,wBAA0B,IAE1C,SAACxB,GACG,OAAOA,EAAKyB,oBAAsB,MAEtC,SAACvB,EAAsBC,GACnB,IAAIuB,EAAmDxB,EAAEsB,uBACpDE,IACDA,EAAwB,MAE5B,IAAIC,EAAmDxB,EAAEqB,uBAIzD,OAHKG,IACDA,EAAwB,MAEC,MAAzBD,GAA0D,MAAzBC,EAC1B,EAEkB,MAAzBD,GAA0D,MAAzBC,EACD,MAAzBD,GAAiC,EAAI,EAEzCE,IAAOC,QAAQH,EAAuBC,IAEjD,WACI,MAAO,IAEX,WACI,OAAO,OAGnB,IAAIxC,EACI,kBACA,gBACA,EACA,SAACa,GACG,OAAOQ,EAAwBR,EAAK8B,oBAExC,WACI,OAAO,MAEX,SAAC5B,EAAsBC,GAGnB,OAFyBO,EAAqBR,EAAE4B,oBAAsB,IAC7CpB,EAAqBP,EAAE2B,oBAAsB,IAG1E,WACI,MAAO,IAEX,WACI,OAAO,OAGnB,IAAI3C,EACI,sBACA,yBACA,EACA,SAACa,GACG,OAAOe,EAAef,EAAK+B,wBAE/B,SAAC/B,GACG,OAAOA,EAAKgC,2BAA6B,MAE7C,SAAC9B,EAAsBC,GAGnB,OAF6BD,EAAE6B,uBAAyB,IAC3B5B,EAAE4B,uBAAyB,IAG5D,SAACpB,GACG,OAAOI,EAAeJ,EAAQsB,8BAElC,WACI,OAAO,OAGnB,IAAI9C,EACI,kBACA,SACA,EACA,SAACa,GACG,OAAOe,EAAef,EAAKkC,mBAE/B,SAAClC,GACG,OAAOA,EAAKmC,gBAAkB,MAElC,SAACjC,EAAsBC,GAGnB,OAFyBD,EAAEgC,kBAAoB,IACtB/B,EAAE+B,kBAAoB,IAGnD,SAACvB,GACG,OAAOI,EAAeJ,EAAQyB,yBAElC,WACI,OAAO,OAGnB,IAAIjD,EACI,iBACA,aACA,EACA,SAACa,GACG,OAAOe,EAAef,EAAKqC,kBAE/B,SAACrC,GACG,OAAOA,EAAKsC,eAAiB,MAEjC,SAACpC,EAAsBC,GAGnB,OAFwBD,EAAEmC,iBAAmB,IACrBlC,EAAEkC,iBAAmB,IAGjD,SAAC1B,GACG,OAAOI,EAAeJ,EAAQ4B,wBAElC,WACI,OAAO,QASjBC,EAA2BzC,EAAQ0C,OAAO,SAACC,EAAgBC,GAE7D,OADAD,EAAIC,EAAOvD,IAAMuD,EACVD,GACR,IAQGE,mLAEE,IAAMjC,EAAUb,KAAK+C,MAAMlC,QAC3B,GAAKA,EAAL,CAGA,IAAMmC,EAAUhD,KAAK+C,MAAMC,QAE3B,OACQC,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAUC,UAAWJ,EAAQK,QACzBJ,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAWG,IAAI,UAAf,UACCrD,EACAsD,OAAO,SAACV,GACL,MAAqB,SAAdA,EAAOvD,KAEjBsD,IAAI,SAACC,GACF,IAAM1C,EAAM0C,EAAOhD,kBAAkBgB,GAC/B2C,EAAWrD,EACN8C,EAAA7C,EAAA8C,cAAA,KAAGE,UAAWJ,EAAQS,UACnBC,KAAMvD,GAAM0C,EAAOjD,cAAciB,IACrCgC,EAAOjD,cAAciB,GAC/B,OACQoC,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAWG,IAAKT,EAAOvD,GACZqE,MAAOd,EAAOrD,QAAU,QAAU,QACxCgE,cAxBVI,IAAMC,WAsD3BC,EAAWC,qBArBM,SAACC,GACpB,MAAO,CACHX,OAAQ,CACJY,gBAAiBD,EAAME,QAAQC,KAAK,MAExCV,UAAW,CACPW,WAAYJ,EAAMK,WAAWC,QAAQF,WACrCG,MAAOP,EAAMK,WAAWC,QAAQC,MAChCC,eAAgB,OAChBC,uCAAwC,CACpCF,MAAOP,EAAMK,WAAWC,QAAQC,MAChCC,eAAgB,QAEpBE,UAAW,CACPH,MAAOP,EAAMK,WAAWC,QAAQC,MAChCC,eAAgB,gBAMfT,CAA2BjB,GAEtC6B,6MAeFC,OAAS,SAACC,GACN,IAAMC,EAAyBC,EAAKC,MAAMC,SAAW,OAC/CC,EAA8BH,EAAKC,MAAMG,OAAS,MAElDA,EAAuBL,IAAmBD,EACtB,SAAjBK,EAA0B,MAAQ,OACnB,SAAbL,EAAsB,MAAQ,OAEzCE,EAAKK,SAAS,CACVH,QAASJ,EACTM,QACAtE,QAASkE,EAAKC,MAAMnE,8FAxBF,IAAAwE,EAAArF,KACtBF,OAAAwF,EAAA,EAAAxF,CAAAyF,EAAAnF,EAAAoF,KAAC,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAnF,EAAAuF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACkDC,EAAaC,aAD/D,OAE2B,OADlBN,EADTE,EAAAK,MAEgBC,QACTb,EAAKD,SAAS,CACVD,MAAO,MACPF,QAAS,OACTpE,QAAS6E,EAASS,OAN7B,wBAAAP,EAAAQ,SAAAX,EAAAzF,QAADF,oCA2BK,IAAAuG,EAAArG,KACCgF,EAAQhF,KAAKgF,MACnB,IAAKA,EACD,OAAQ/B,EAAA7C,EAAA8C,cAAA,yBAEZ,IAAMrC,EAAUmE,EAAMnE,QACtB,IAAKA,EACD,OAAQoC,EAAA7C,EAAA8C,cAAA,yBAEZ,IAAMF,EAAehD,KAAK+C,MAAMC,QAC1BiC,EAAkBD,EAAMC,SAAW,OACnCE,EAAuBH,EAAMG,OAAS,MACtCpE,EAAoCF,EAAQE,aAC5CpB,GAAc+C,EAAcuC,IAAYhF,EAAQ,IAAIN,WAEpD2G,EAAkBxG,OAAAyG,EAAA,EAAAzG,CAAOiB,GAM/B,OALAuF,EAAmBE,KAAK7G,GACV,SAAVwF,GACAmB,EAAmBG,UAIfxD,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAOC,UAAWJ,EAAQ0D,MACtBzD,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAOwD,QAAQ,SACX1D,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,KACIF,EAAA7C,EAAA8C,cAAC0D,EAAA,iBAAD,CAAkB5C,MAAO6C,GACrB5D,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAUC,UAAWJ,EAAQ8D,QACzB7D,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAW4D,QAAS9G,EAAQe,QACxBiC,EAAA7C,EAAA8C,cAAA,MAAIE,UAAWJ,EAAQgE,OAAvB,2CAGA/D,EAAA7C,EAAA8C,cAAA,OAAKE,UAAWJ,EAAQiE,UAAxB,iBAEcC,EAA4BrG,EAAQsG,YAI1DlE,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAUC,UAAWJ,EAAQ8D,QACxB7G,EAAQ2C,IAAI,SAACC,GACV,IAAMuE,EAA+BnC,IAAYpC,EAAOvD,IAAK6F,EACvDkC,EAAmBxE,EAAOrD,QAAU,aAAe,eACnD8H,EAAarC,IAAYpC,EAAOvD,GAEtC,OACQ2D,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAWG,IAAKT,EAAOvD,GACZqE,MAAOd,EAAOrD,QAAU,QAAU,OAClC4H,cAAeA,GACtBnE,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAS6D,MAAM,OACNO,UAAWF,EACXG,WAAY,KACjBvE,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAgBsE,OAAQH,EACRI,UAAWvC,EACXwC,QAAS,kBAAMtB,EAAKzB,OAAO/B,EAAOvD,MAC7CuD,EAAOtD,YAQxC0D,EAAA7C,EAAA8C,cAACY,EAAD,CAAUjD,QAASA,KAEvBoC,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,KACIF,EAAA7C,EAAA8C,cAACY,EAAD,CAAUjD,QAASA,KAEvBoC,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,KACKmD,EAAmB1D,IAAI,SAACgF,GACrB,OACQ3E,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAUG,IAAKsE,EAAWrI,KAAM6D,UAAWJ,EAAQ6E,KAC9C5H,EAAQ2C,IAAI,SAACC,GACV,IAAMiF,EAAOjF,EAAOnD,aAAakI,GAC3BpE,EAAWsE,EACR7E,EAAA7C,EAAA8C,cAAA,KAAGE,UAAWJ,EAAQ+E,SACnBrE,KAAMoE,GAAOjF,EAAOpD,SAASmI,IAC/B/E,EAAOpD,SAASmI,GAC1B,OACQ3E,EAAA7C,EAAA8C,cAACC,EAAA,EAAD,CAAWG,IAAKT,EAAOvD,GACZqE,MAAOd,EAAOrD,QAAU,QAAU,QACxCgE,kBA7G9BI,IAAMC,WAuKtBmE,EAFMjE,qBA1CN,SAACC,GACZ,MAAO,CACH0C,KAAM,CACFuB,UAAW,QAEfJ,IAAK,CACDK,qBAAsB,CAClBjE,gBAAiBD,EAAME,QAAQiE,WAAWC,UAGlDtB,OAAQ,CACJ7C,gBAAiBD,EAAME,QAAQmE,QAAQC,MAE3CtB,MAAO,CACHuB,SAAUvE,EAAMK,WAAW2C,MAAMuB,SACjCnE,WAAYJ,EAAMK,WAAW2C,MAAM5C,WACnCoE,WAAYxE,EAAMK,WAAW2C,MAAMwB,WACnCC,WAAYzE,EAAMK,WAAW2C,MAAMyB,WACnClE,MAAOP,EAAME,QAAQwE,OAAOC,OAEhC1B,SAAU,CACNsB,SAAUvE,EAAMK,WAAWC,QAAQiE,SACnCnE,WAAYJ,EAAMK,WAAWC,QAAQF,WACrCoE,WAAYxE,EAAMK,WAAWC,QAAQkE,WACrCC,WAAYzE,EAAMK,WAAWC,QAAQmE,WACrClE,MAAOP,EAAME,QAAQwE,OAAOC,OAEhCZ,SAAU,CACN3D,WAAYJ,EAAMK,WAAWuE,MAAMxE,WACnCG,MAAOP,EAAMK,WAAWuE,MAAMrE,MAC9BC,eAAgB,OAChBC,uCAAwC,CACpCF,MAAOP,EAAMK,WAAWuE,MAAMrE,MAC9BC,eAAgB,QAEpBE,UAAW,CACPH,MAAOP,EAAMK,WAAWuE,MAAMrE,MAC9BC,eAAgB,gBAKXT,CAAmBY,GC3elCkE,mLAEE,OAAO5F,EAAA7C,EAAA8C,cAAC4F,EAAD,aAFGjF,aAMLgD,EAAYkC,yBAAe,CACpC7E,QAAS,CACL8E,KAAM,UAIDpI,EAAuB,SAACqI,GACjC,OAAKA,EAGEC,KAAKC,MAAMF,GAFP,MAKFvI,EAA0B,SAACuI,GACpC,OAAKA,EAGE,IAAIC,KAAKD,GAAOG,qBAFZ,IAKFlC,EAA8B,SAAC+B,GACxC,IAAKA,EACD,MAAO,GAEX,IAAMI,EAAO,IAAIH,KAAKD,GACtB,SAAAnI,OAAUuI,EAAKD,qBAAf,KAAAtI,OAAuCuI,EAAKC,uBAGnCrI,EAAiB,SAACgI,GAC3B,OAAa,MAATA,QAA2BM,IAAVN,EACV,GAEJA,EAAMhI,kBAGF4H,ICjCKW,QACiB,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACjB,2DCZhBC,IAASC,OAAO7G,EAAA7C,EAAA8C,cAAC6G,EAAD,MAAQC,SAASC,eAAe,SDmIxC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC","file":"static/js/main.ecffcd5e.chunk.js","sourcesContent":["import Axios, {AxiosResponse} from \"axios\";\nimport {Summary} from \"../model/Summary\";\n\nclass StatsService {\n    getSummary(): Promise<AxiosResponse<Summary>> {\n        return Axios.get(\"data/summary.json\");\n    }\n}\n\nexport default new StatsService();\n","import React from 'react';\nimport {\n    MuiThemeProvider,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableFooter,\n    TableHead,\n    TableRow,\n    TableSortLabel,\n    Theme,\n    Tooltip,\n    withStyles\n} from \"@material-ui/core\";\nimport {SummaryTableProps} from \"./SummaryTableProps\";\nimport {SummaryTableState} from \"./SummaryTableState\";\nimport {SortDirection} from \"@material-ui/core/TableCell\";\nimport {SummaryRepository} from \"../../model/SummaryRepository\";\nimport {\n    darkTheme,\n    parseIsoDateToMillis,\n    reformatIsoAsLocaleDate,\n    reformatIsoAsLocaleDatetime,\n    toLocaleString\n} from \"../App\";\nimport {StyleRules} from \"@material-ui/core/styles\";\nimport {Summary} from \"../../model/Summary\";\nimport Semver from \"semver\";\nimport {AxiosResponse} from \"axios\";\nimport StatsService from \"../../service/StatsService\";\n\nclass Column {\n    constructor(\n            readonly id: string,\n            readonly name: string,\n            readonly numeric: boolean,\n            readonly accessor: (repo: SummaryRepository) => string,\n            readonly linkAccessor: (repo: SummaryRepository) => string | null,\n            readonly comparator: (a: SummaryRepository, b: SummaryRepository) => number,\n            readonly totalAccessor: (summary: Summary) => string,\n            readonly totalLinkAccessor: (summary: Summary) => string | null\n    ) {\n    }\n}\n\nconst columns: Column[] = [\n    new Column(\n            \"name\",\n            \"Name\",\n            false,\n            (repo: SummaryRepository): string => {\n                return repo.name;\n            },\n            (repo: SummaryRepository): string | null => {\n                return repo.url;\n            },\n            (a: SummaryRepository, b: SummaryRepository): number => {\n                const nameA = a.name.replace('_', '-');\n                const nameB = b.name.replace('_', '-');\n                return nameA.localeCompare(nameB);\n            },\n            (): string => {\n                return \"\";\n            },\n            (): string | null => {\n                return null;\n            }\n    ),\n    new Column(\n            \"createdAt\",\n            \"Created\",\n            false,\n            (repo: SummaryRepository): string => {\n                return reformatIsoAsLocaleDate(repo.created_at);\n            },\n            (): string | null => {\n                return null;\n            },\n            (a: SummaryRepository, b: SummaryRepository): number => {\n                const createdAtA = parseIsoDateToMillis(a.created_at) || 0;\n                const createdAtB = parseIsoDateToMillis(b.created_at) || 0;\n                return createdAtA - createdAtB;\n            },\n            (summary: Summary): string => {\n                return `${summary.repositories.length} projects`;\n            },\n            (summary: Summary): string | null => {\n                return summary.url;\n            }\n    ),\n    new Column(\n            \"openIssuesCount\",\n            \"Open issues\",\n            true,\n            (repo: SummaryRepository): string => {\n                return toLocaleString(repo.open_issues_count);\n            },\n            (repo: SummaryRepository): string | null => {\n                return repo.open_issues_url;\n            },\n            (a: SummaryRepository, b: SummaryRepository): number => {\n                const openIssuesCountA = a.open_issues_count || 0;\n                const openIssuesCountB = b.open_issues_count || 0;\n                return openIssuesCountA - openIssuesCountB;\n            },\n            (summary: Summary): string => {\n                return toLocaleString(summary.total_open_issues_count);\n            },\n            (summary: Summary): string | null => {\n                return summary.total_open_issues_url;\n            }\n    ),\n    new Column(\n            \"openPullRequestsCount\",\n            \"Open PRs\",\n            true,\n            (repo: SummaryRepository): string => {\n                return toLocaleString(repo.open_pull_requests_count);\n            },\n            (repo: SummaryRepository): string | null => {\n                return repo.open_pull_requests_url;\n            },\n            (a: SummaryRepository, b: SummaryRepository): number => {\n                const openPullRequestsCountA = a.open_pull_requests_count || 0;\n                const openPullRequestsCountB = b.open_pull_requests_count || 0;\n                return openPullRequestsCountA - openPullRequestsCountB;\n            },\n            (summary: Summary): string => {\n                return toLocaleString(summary.total_open_pull_requests_count);\n            },\n            (summary: Summary): string | null => {\n                return summary.total_open_pull_requests_url;\n            }\n    ),\n    new Column(\n            \"latestReleaseVersion\",\n            \"Release\",\n            false,\n            (repo: SummaryRepository): string => {\n                return repo.latest_release_version || \"\";\n            },\n            (repo: SummaryRepository): string | null => {\n                return repo.latest_release_url || null;\n            },\n            (a: SummaryRepository, b: SummaryRepository): number => {\n                let latestReleaseVersionA: string | undefined | null = a.latest_release_version;\n                if (!latestReleaseVersionA) {\n                    latestReleaseVersionA = null;\n                }\n                let latestReleaseVersionB: string | undefined | null = b.latest_release_version;\n                if (!latestReleaseVersionB) {\n                    latestReleaseVersionB = null;\n                }\n                if (latestReleaseVersionA == null && latestReleaseVersionB == null) {\n                    return 0;\n                }\n                if (latestReleaseVersionA == null || latestReleaseVersionB == null) {\n                    return latestReleaseVersionA == null ? -1 : 1;\n                }\n                return Semver.compare(latestReleaseVersionA, latestReleaseVersionB);\n            },\n            (): string => {\n                return \"\";\n            },\n            (): string | null => {\n                return null;\n            }\n    ),\n    new Column(\n            \"latestReleaseAt\",\n            \"Release date\",\n            false,\n            (repo: SummaryRepository): string => {\n                return reformatIsoAsLocaleDate(repo.latest_release_at);\n            },\n            (): string | null => {\n                return null;\n            },\n            (a: SummaryRepository, b: SummaryRepository): number => {\n                const latestReleaseAtA = parseIsoDateToMillis(a.latest_release_at) || 0;\n                const latestReleaseAtB = parseIsoDateToMillis(b.latest_release_at) || 0;\n                return latestReleaseAtA - latestReleaseAtB;\n            },\n            (): string => {\n                return \"\";\n            },\n            (): string | null => {\n                return null;\n            }\n    ),\n    new Column(\n            \"commitsSinceRelease\",\n            \"Commits since release\",\n            true,\n            (repo: SummaryRepository): string => {\n                return toLocaleString(repo.commits_since_release);\n            },\n            (repo: SummaryRepository): string | null => {\n                return repo.commits_since_release_url || null;\n            },\n            (a: SummaryRepository, b: SummaryRepository): number => {\n                const commitsSinceReleaseA = a.commits_since_release || 0;\n                const commitsSinceReleaseB = b.commits_since_release || 0;\n                return commitsSinceReleaseA - commitsSinceReleaseB;\n            },\n            (summary: Summary): string => {\n                return toLocaleString(summary.total_commits_since_release);\n            },\n            (): string | null => {\n                return null;\n            }\n    ),\n    new Column(\n            \"stargazersCount\",\n            \"Stars\",\n            true,\n            (repo: SummaryRepository): string => {\n                return toLocaleString(repo.stargazers_count);\n            },\n            (repo: SummaryRepository): string | null => {\n                return repo.stargazers_url || null;\n            },\n            (a: SummaryRepository, b: SummaryRepository): number => {\n                const stargazersCountA = a.stargazers_count || 0;\n                const stargazersCountB = b.stargazers_count || 0;\n                return stargazersCountA - stargazersCountB;\n            },\n            (summary: Summary): string => {\n                return toLocaleString(summary.total_stargazers_count);\n            },\n            (): string | null => {\n                return null;\n            }\n    ),\n    new Column(\n            \"downloadsCount\",\n            \"Downloads\",\n            true,\n            (repo: SummaryRepository): string => {\n                return toLocaleString(repo.downloads_count);\n            },\n            (repo: SummaryRepository): string | null => {\n                return repo.downloads_url || null;\n            },\n            (a: SummaryRepository, b: SummaryRepository): number => {\n                const downloadsCountA = a.downloads_count || 0;\n                const downloadsCountB = b.downloads_count || 0;\n                return downloadsCountA - downloadsCountB;\n            },\n            (summary: Summary): string => {\n                return toLocaleString(summary.total_downloads_count);\n            },\n            (): string | null => {\n                return null;\n            }\n    ),\n];\n\ninterface ColumnMap {\n    [key: string]: Column;\n}\n\nconst columnMapping: ColumnMap = columns.reduce((map: ColumnMap, column: Column): ColumnMap => {\n    map[column.id] = column;\n    return map;\n}, {});\n\n\ninterface TotalRowProps {\n    classes: any;\n    summary?: Summary;\n}\n\nclass TotalRowBase extends React.Component<TotalRowProps, {}> {\n    render() {\n        const summary = this.props.summary;\n        if (!summary) {\n            return;\n        }\n        const classes = this.props.classes;\n\n        return (\n                <TableRow className={classes.totals}>\n                    <TableCell key=\"totals\">Totals</TableCell>\n                    {columns\n                    .filter((column: Column) => {\n                        return column.id !== \"name\";\n                    })\n                    .map((column: Column) => {\n                        const url = column.totalLinkAccessor(summary);\n                        const contents = url\n                                ? (<a className={classes.totalLink}\n                                      href={url}>{column.totalAccessor(summary)}</a>)\n                                : column.totalAccessor(summary);\n                        return (\n                                <TableCell key={column.id}\n                                           align={column.numeric ? \"right\" : \"left\"}>\n                                    {contents}\n                                </TableCell>\n                        );\n                    })}\n                </TableRow>\n        );\n    }\n}\n\nconst totalRowStyles = (theme: Theme): StyleRules => {\n    return {\n        totals: {\n            backgroundColor: theme.palette.grey[\"300\"]\n        },\n        totalLink: {\n            fontWeight: theme.typography.caption.fontWeight,\n            color: theme.typography.caption.color,\n            textDecoration: \"none\",\n            \"&:focus, &:visited, &:link, &:active\": {\n                color: theme.typography.caption.color,\n                textDecoration: \"none\"\n            },\n            \"&:hover\": {\n                color: theme.typography.caption.color,\n                textDecoration: \"underline\"\n            }\n        }\n    };\n};\n\nconst TotalRow = withStyles(totalRowStyles)(TotalRowBase);\n\nclass SummaryTableBase extends React.Component<SummaryTableProps, SummaryTableState> {\n\n    componentDidMount(): void {\n        (async () => {\n            const response: AxiosResponse<Summary> = await StatsService.getSummary();\n            if (response.status === 200) {\n                this.setState({\n                    order: \"asc\",\n                    orderBy: \"name\",\n                    summary: response.data\n                });\n            }\n        })();\n    }\n\n    sortBy = (columnId: string) => {\n        const currentOrderBy: string = this.state.orderBy || \"name\";\n        const currentOrder: SortDirection = this.state.order || \"asc\";\n\n        const order: SortDirection = currentOrderBy === columnId ?\n                (currentOrder === \"desc\" ? \"asc\" : \"desc\")\n                : (columnId === \"name\" ? \"asc\" : \"desc\");\n\n        this.setState({\n            orderBy: columnId,\n            order,\n            summary: this.state.summary\n        });\n    };\n\n    render() {\n        const state = this.state;\n        if (!state) {\n            return (<div>Loading...</div>);\n        }\n        const summary = state.summary;\n        if (!summary) {\n            return (<div>Loading...</div>);\n        }\n        const classes: any = this.props.classes;\n        const orderBy: string = state.orderBy || \"name\";\n        const order: SortDirection = state.order || \"asc\";\n        const repositories: SummaryRepository[] = summary.repositories;\n        const comparator = (columnMapping[orderBy] || columns[0]).comparator;\n\n        const sortedRepositories = [...repositories];\n        sortedRepositories.sort(comparator);\n        if (order === \"desc\") {\n            sortedRepositories.reverse();\n        }\n\n        return (\n                <Paper className={classes.root}>\n                    <Table padding=\"dense\">\n                        <TableHead>\n                            <MuiThemeProvider theme={darkTheme}>\n                                <TableRow className={classes.header}>\n                                    <TableCell colSpan={columns.length}>\n                                        <h2 className={classes.title}>\n                                            GantSign open-source project statistics\n                                        </h2>\n                                        <div className={classes.subtitle}>\n                                            Last\n                                            updated: {reformatIsoAsLocaleDatetime(summary.data_at)}\n                                        </div>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow className={classes.header}>\n                                    {columns.map((column: Column) => {\n                                        const sortDirection: SortDirection = orderBy === column.id ? order : false;\n                                        const tooltipPlacement = column.numeric ? \"bottom-end\" : \"bottom-start\";\n                                        const sortActive = orderBy === column.id;\n\n                                        return (\n                                                <TableCell key={column.id}\n                                                           align={column.numeric ? \"right\" : \"left\"}\n                                                           sortDirection={sortDirection}>\n                                                    <Tooltip title=\"Sort\"\n                                                             placement={tooltipPlacement}\n                                                             enterDelay={300}>\n                                                        <TableSortLabel active={sortActive}\n                                                                        direction={order}\n                                                                        onClick={() => this.sortBy(column.id)}>\n                                                            {column.name}\n                                                        </TableSortLabel>\n                                                    </Tooltip>\n                                                </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            </MuiThemeProvider>\n                            <TotalRow summary={summary}/>\n                        </TableHead>\n                        <TableFooter>\n                            <TotalRow summary={summary}/>\n                        </TableFooter>\n                        <TableBody>\n                            {sortedRepositories.map((repository: SummaryRepository) => {\n                                return (\n                                        <TableRow key={repository.name} className={classes.row}>\n                                            {columns.map((column: Column) => {\n                                                const link = column.linkAccessor(repository);\n                                                const contents = link ?\n                                                        (<a className={classes.bodyLink}\n                                                            href={link}>{column.accessor(repository)}</a>)\n                                                        : column.accessor(repository);\n                                                return (\n                                                        <TableCell key={column.id}\n                                                                   align={column.numeric ? \"right\" : \"left\"}>\n                                                            {contents}\n                                                        </TableCell>\n                                                );\n                                            })}\n                                        </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </Paper>\n        );\n    }\n}\n\nconst styles = (theme: Theme): StyleRules => {\n    return {\n        root: {\n            overflowX: \"auto\"\n        },\n        row: {\n            \"&:nth-of-type(odd)\": {\n                backgroundColor: theme.palette.background.default\n            }\n        },\n        header: {\n            backgroundColor: theme.palette.primary.dark\n        },\n        title: {\n            fontSize: theme.typography.title.fontSize,\n            fontWeight: theme.typography.title.fontWeight,\n            fontFamily: theme.typography.title.fontFamily,\n            lineHeight: theme.typography.title.lineHeight,\n            color: theme.palette.common.white\n        },\n        subtitle: {\n            fontSize: theme.typography.caption.fontSize,\n            fontWeight: theme.typography.caption.fontWeight,\n            fontFamily: theme.typography.caption.fontFamily,\n            lineHeight: theme.typography.caption.lineHeight,\n            color: theme.palette.common.white\n        },\n        bodyLink: {\n            fontWeight: theme.typography.body1.fontWeight,\n            color: theme.typography.body1.color,\n            textDecoration: \"none\",\n            \"&:focus, &:visited, &:link, &:active\": {\n                color: theme.typography.body1.color,\n                textDecoration: \"none\"\n            },\n            \"&:hover\": {\n                color: theme.typography.body1.color,\n                textDecoration: \"underline\"\n            }\n        }\n    };\n};\nconst SummaryTable = withStyles(styles)(SummaryTableBase);\n\nexport default SummaryTable;\n","import React, {Component} from 'react';\nimport SummaryTable from \"./summarytable/SummaryTable\";\nimport {createMuiTheme} from \"@material-ui/core\";\n\nclass App extends Component {\n    render() {\n        return <SummaryTable/>;\n    }\n}\n\nexport const darkTheme = createMuiTheme({\n    palette: {\n        type: \"dark\"\n    }\n});\n\nexport const parseIsoDateToMillis = (value: string | null | undefined): number | null => {\n    if (!value) {\n        return null;\n    }\n    return Date.parse(value);\n};\n\nexport const reformatIsoAsLocaleDate = (value: string | null | undefined): string => {\n    if (!value) {\n        return \"\";\n    }\n    return new Date(value).toLocaleDateString();\n};\n\nexport const reformatIsoAsLocaleDatetime = (value: string | null | undefined): string => {\n    if (!value) {\n        return \"\";\n    }\n    const date = new Date(value);\n    return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n};\n\nexport const toLocaleString = (value: number | null | undefined): string => {\n    if (value == null || value === undefined) {\n        return \"\";\n    }\n    return value.toLocaleString();\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n        window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n                /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n                (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n                window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                            'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n                return;\n            }\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                        );\n\n                        // Execute callback\n                        if (config && config.onUpdate) {\n                            config.onUpdate(registration);\n                        }\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log('Content is cached for offline use.');\n\n                        // Execute callback\n                        if (config && config.onSuccess) {\n                            config.onSuccess(registration);\n                        }\n                    }\n                }\n            };\n        };\n    })\n    .catch(error => {\n        console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n    .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then(registration => {\n                registration.unregister().then(() => {\n                    window.location.reload();\n                });\n            });\n        } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n        }\n    })\n    .catch(() => {\n        console.log(\n                'No internet connection found. App is running in offline mode.'\n        );\n    });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './stats/ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}