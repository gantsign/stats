{"version":3,"sources":["serviceWorker.ts","index.tsx","stats/service/StatsService.ts","stats/ui/App.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","service_StatsService","Axios","get","SummaryTable","React","lazy","Promise","all","__webpack_require__","e","bind","DownloadsDialog","library","add","faChartLine","showChart","repositoryName","console","log","state","_this","summary","downloads","setState","showDownloadChart","dialogClosed","_this2","this","Object","asyncToGenerator","regenerator_default","mark","_callee","summaryPromise","downloadsPromise","summaryResponse","downloadsResponse","wrap","_context","prev","next","StatsService","getSummary","getDownloads","sent","status","concat","statusText","data","errorMessage","abrupt","stop","_this3","Fragment","react","fallback","onShowDownloadsChart","open","onClose","Component","darkTheme","createMuiTheme","palette","type","parseIsoDateToMillis","value","Date","parse","reformatIsoAsLocaleDate","toLocaleDateString","reformatIsoAsLocaleDatetime","date","toLocaleTimeString","toLocaleString","undefined"],"mappings":"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","file":"static/js/main.8d2c78d3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n        window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n                /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n                (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n                window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                            'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n                return;\n            }\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                        );\n\n                        // Execute callback\n                        if (config && config.onUpdate) {\n                            config.onUpdate(registration);\n                        }\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log('Content is cached for offline use.');\n\n                        // Execute callback\n                        if (config && config.onSuccess) {\n                            config.onSuccess(registration);\n                        }\n                    }\n                }\n            };\n        };\n    })\n    .catch(error => {\n        console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n    .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then(registration => {\n                registration.unregister().then(() => {\n                    window.location.reload();\n                });\n            });\n        } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n        }\n    })\n    .catch(() => {\n        console.log(\n                'No internet connection found. App is running in offline mode.'\n        );\n    });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './stats/ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Axios, {AxiosResponse} from \"axios\";\nimport {Summary} from \"../model/Summary\";\nimport {DownloadSnapshot} from \"../model/DownloadSnapshot\";\n\nclass StatsService {\n    getSummary(): Promise<AxiosResponse<Summary>> {\n        return Axios.get(\"data/summary.json\");\n    }\n\n    getDownloads(): Promise<AxiosResponse<DownloadSnapshot[]>> {\n        return Axios.get(\"data/downloads.json\");\n    }\n}\n\nexport default new StatsService();\n","import React, {Suspense} from \"react\";\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faChartLine} from \"@fortawesome/free-solid-svg-icons\";\nimport {AxiosResponse} from \"axios\";\nimport {Summary} from \"../model/Summary\";\nimport StatsService from \"../service/StatsService\";\nimport {DownloadSnapshot} from \"../model/DownloadSnapshot\";\n\nconst SummaryTable = React.lazy(() => import(\"./summarytable/SummaryTable\"));\nconst DownloadsDialog = React.lazy(() => import(\"./DownloadsDialog\"));\n\nlibrary.add(faChartLine);\n\ninterface AppState {\n\n    summary?: Summary | null;\n\n    downloads?: DownloadSnapshot[];\n\n    showDownloadChart?: boolean;\n\n    repositoryName?: string;\n\n    errorMessage?: string;\n}\n\nclass App extends React.Component<{}, AppState> {\n    componentDidMount(): void {\n        (async () => {\n            const summaryPromise = StatsService.getSummary();\n            const downloadsPromise = StatsService.getDownloads();\n\n            const summaryResponse: AxiosResponse<Summary> = await summaryPromise;\n            if (summaryResponse.status !== 200) {\n                console.log(`Summary request failed: [${summaryResponse.status} ${summaryResponse.statusText}] ${summaryResponse.data}`);\n                this.setState({\n                    errorMessage: \"Unable to access repository data, please try again later.\"\n                });\n                return;\n            }\n\n            const downloadsResponse: AxiosResponse<DownloadSnapshot[]> = await downloadsPromise;\n            if (downloadsResponse.status !== 200) {\n                console.log(`Downloads request failed: [${downloadsResponse.status} ${downloadsResponse.statusText}] ${downloadsResponse.data}`);\n                this.setState({\n                    errorMessage: \"Unable to access repository data, please try again later.\"\n                });\n                return;\n            }\n\n            this.setState({\n                summary: summaryResponse.data,\n                downloads: downloadsResponse.data\n            });\n        })();\n    }\n\n    showChart = (repositoryName: string) => {\n        console.log(repositoryName);\n        const state = this.state;\n        const summary = state ? state.summary : null;\n        const downloads = state ? state.downloads : [];\n\n        this.setState({\n            downloads,\n            summary,\n            showDownloadChart: true,\n            repositoryName\n        });\n    };\n\n    dialogClosed = () => {\n        const state = this.state;\n        const summary = state ? state.summary : null;\n        const downloads = state ? state.downloads : [];\n        const repositoryName = state.repositoryName;\n\n        this.setState({\n            downloads,\n            summary,\n            showDownloadChart: false,\n            repositoryName\n        });\n    };\n\n    render() {\n        const state = this.state;\n        if (!state) {\n            return <div>Loading...</div>;\n        }\n        const errorMessage = state.errorMessage;\n        if (errorMessage) {\n            return <div>{errorMessage}</div>;\n        }\n        const summary = state.summary || null;\n        const downloads = state.downloads || [];\n        if (!summary) {\n            return <div>Loading...</div>;\n        }\n\n        const repositoryName = state.repositoryName || null;\n        const showDownloadChart = state.showDownloadChart || false;\n\n        return (\n                <>\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <SummaryTable\n                                summary={summary}\n                                onShowDownloadsChart={repositoryName => this.showChart(repositoryName)}/>\n                    </Suspense>\n                    <Suspense fallback={<></>}>\n                        <DownloadsDialog\n                                open={showDownloadChart}\n                                downloads={downloads}\n                                repositoryName={repositoryName}\n                                onClose={this.dialogClosed}/>\n                    </Suspense>\n                </>\n        );\n    }\n}\n\nexport const darkTheme = createMuiTheme({\n    palette: {\n        type: \"dark\"\n    }\n});\n\nexport const parseIsoDateToMillis = (value: string | null | undefined): number | null => {\n    if (!value) {\n        return null;\n    }\n    return Date.parse(value);\n};\n\nexport const reformatIsoAsLocaleDate = (value: string | null | undefined): string => {\n    if (!value) {\n        return \"\";\n    }\n    return new Date(value).toLocaleDateString();\n};\n\nexport const reformatIsoAsLocaleDatetime = (value: string | null | undefined): string => {\n    if (!value) {\n        return \"\";\n    }\n    const date = new Date(value);\n    return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n};\n\nexport const toLocaleString = (value: number | null | undefined): string => {\n    if (value == null || value === undefined) {\n        return \"\";\n    }\n    return value.toLocaleString();\n};\n\nexport default App;\n"],"sourceRoot":""}