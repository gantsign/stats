{"version":3,"sources":["stats/ui/DownloadChart.tsx","stats/ui/DownloadsDialog.tsx"],"names":["DownloadChart","onResize","dimensions","bounds","_this","setState","width","height","_this2","this","repositoryName","props","variant","columnName","variantLabel","downloadsDf","where","row","repository_name","setIndex","subset","data","x","getIndex","toArray","y","getSeries","type","react","index_esm","_ref","measureRef","state","layout","title","xaxis","yaxis","ref","style","react_plotly_default","a","React","DialogTransition","index_es","Object","assign","direction","DownloadsDialogBase","repoChanged","event","target","value","variantChanged","prevProps","downloads","DataForge","values","parseDates","repoNames","distinct","sort","nameA","nameB","nameNormA","replace","nameNormB","localeCompare","open","classes","fullScreen","TransitionComponent","position","styles","theme","darkTheme","aria-label","className","closeButton","onClick","onClose","Close_default","htmlFor","onChange","inputProps","name","id","map","key","ui_DownloadChart","DownloadsDialog","withStyles","right","spacing","unit","top"],"mappings":"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","file":"static/js/6.2a759c3b.chunk.js","sourcesContent":["import * as React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport * as Plotly from \"plotly.js\";\nimport {IDataFrame} from \"data-forge\";\nimport Measure, {ContentRect} from \"react-measure\";\n\ninterface DownloadChartProps {\n\n    downloadsDf: IDataFrame;\n\n    repositoryName: string;\n\n    variant: \"count\" | \"delta\";\n}\n\ninterface DownloadChartState {\n\n    width: number;\n\n    height: number;\n}\n\nclass DownloadChart extends React.Component<DownloadChartProps, DownloadChartState> {\n\n    onResize = (dimensions: ContentRect) => {\n        const bounds = dimensions.bounds;\n        if (!bounds) {\n            return;\n        }\n        this.setState({\n            width: bounds.width,\n            height: bounds.height\n        });\n    };\n\n    render(): React.ReactNode {\n        const repositoryName = this.props.repositoryName;\n\n        const variant = this.props.variant;\n\n        const columnName = variant === \"count\" ? \"downloads_count\" : \"downloads_delta\";\n        const variantLabel = variant === \"count\" ? \"Download count\" : \"Downloads / day\";\n\n        const downloadsDf = this.props.downloadsDf\n        .where(row => row.repository_name === repositoryName)\n        .setIndex(\"data_at\")\n        .subset([columnName]);\n\n        const data: Plotly.Data[] = [\n            {\n                x: downloadsDf.getIndex().toArray(),\n                y: downloadsDf.getSeries(columnName).toArray(),\n                type: \"scatter\",\n            }\n        ];\n        return (\n                <Measure bounds onResize={this.onResize}>\n                    {({measureRef}) => {\n                        const state: DownloadChartState = this.state || {\n                            width: 800,\n                            height: 600\n                        };\n                        const layout: Partial<Plotly.Layout> = {\n                            width: state.width,\n                            height: state.height - 50,\n                            title: repositoryName,\n                            xaxis: {title: \"Date\"},\n                            yaxis: {title: variantLabel}\n                        };\n                        return (\n                                <div ref={measureRef} style={{height: \"100%\"}}>\n                                    <Plot data={data} layout={layout}/>\n                                </div>\n                        );\n                    }}\n                </Measure>\n        );\n    }\n}\n\nexport default DownloadChart;\n","import * as React from \"react\";\nimport {\n    AppBar,\n    Dialog,\n    IconButton,\n    InputLabel,\n    MenuItem,\n    MuiThemeProvider,\n    Select,\n    Slide,\n    Theme,\n    Toolbar,\n    withStyles\n} from \"@material-ui/core\";\nimport {DownloadSnapshot} from \"../model/DownloadSnapshot\";\nimport * as DataForge from \"data-forge\";\nimport {IDataFrame} from \"data-forge\";\nimport DownloadChart from \"./DownloadChart\";\nimport {darkTheme} from \"./App\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport {StyleRules} from \"@material-ui/core/styles\";\n\ninterface DownloadsDialogProps {\n\n    repositoryName: string | null;\n\n    downloads: DownloadSnapshot[];\n\n    open: boolean;\n\n    onClose?: React.ReactEventHandler<{}>;\n\n    classes: any;\n}\n\ninterface DownloadsDialogState {\n\n    repositoryName?: string | null;\n\n    variant: \"count\" | \"delta\";\n}\n\nfunction DialogTransition(props: any) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\nclass DownloadsDialogBase extends React.Component<DownloadsDialogProps, DownloadsDialogState> {\n\n    componentDidMount(): void {\n        this.setState({\n            repositoryName: this.props.repositoryName,\n            variant: \"count\"\n        });\n    }\n\n\n    componentDidUpdate(prevProps: Readonly<DownloadsDialogProps>): void {\n        if (prevProps.repositoryName !== this.props.repositoryName) {\n            this.setState({\n                repositoryName: this.props.repositoryName,\n                variant: \"count\"\n            });\n        }\n    }\n\n    repoChanged = (event: any) => {\n        const state = this.state;\n        if (!state) {\n            return;\n        }\n        const repositoryName: string = event.target.value;\n        const variant = state.variant;\n\n        this.setState({\n            repositoryName,\n            variant\n        });\n    };\n\n    variantChanged = (event: any) => {\n        const state = this.state;\n        if (!state) {\n            return;\n        }\n        const repositoryName = state.repositoryName;\n        const variant: \"count\" | \"delta\" = event.target.value;\n\n        this.setState({\n            repositoryName,\n            variant\n        });\n    };\n\n    render(): React.ReactNode {\n        const state = this.state;\n        if (!state) {\n            return <></>;\n        }\n\n        const downloads = this.props.downloads;\n\n        const repositoryName = state.repositoryName || \"\";\n        const variant = state.variant;\n\n        const downloadsDf: IDataFrame = new DataForge.DataFrame({values: downloads})\n        .parseDates([\"data_at\"]);\n\n        const repoNames: string[] = downloadsDf.getSeries(\"repository_name\")\n        .distinct()\n        .toArray()\n        .sort((nameA: string, nameB: string): number => {\n            const nameNormA = nameA.replace('_', '-');\n            const nameNormB = nameB.replace('_', '-');\n            return nameNormA.localeCompare(nameNormB);\n        });\n\n        const open = this.props.open;\n\n        const classes: any = this.props.classes;\n\n        return (\n                <Dialog open={open}\n                        fullScreen={true}\n                        TransitionComponent={DialogTransition}>\n                    <AppBar position=\"static\">\n                        <Toolbar>\n                            <MuiThemeProvider theme={darkTheme}>\n                                <IconButton aria-label=\"Close\" className={classes.closeButton}\n                                            onClick={this.props.onClose}>\n                                    <CloseIcon/>\n                                </IconButton>\n\n                                <InputLabel htmlFor=\"repo\">Repository</InputLabel>&nbsp;\n                                <Select\n                                        value={repositoryName}\n                                        onChange={this.repoChanged}\n                                        inputProps={{\n                                            name: 'repo',\n                                            id: 'repo',\n                                        }}\n                                >\n                                    {repoNames.map(name =>\n                                            <MenuItem key={name} value={name}>{name}</MenuItem>)}\n                                </Select>\n                                &nbsp;&nbsp;\n                                <InputLabel htmlFor=\"variant\">View</InputLabel>&nbsp;\n                                <Select\n                                        value={variant}\n                                        onChange={this.variantChanged}\n                                        inputProps={{\n                                            name: 'variant',\n                                            id: 'variant',\n                                        }}\n                                >\n                                    <MenuItem value=\"count\">Download count</MenuItem>\n                                    <MenuItem value=\"delta\">Downloads / day</MenuItem>\n                                </Select>\n                            </MuiThemeProvider>\n                        </Toolbar>\n                    </AppBar>\n                    {(() => {\n                        if (!repositoryName) {\n                            return <></>;\n                        }\n                        return <DownloadChart downloadsDf={downloadsDf}\n                                              repositoryName={repositoryName}\n                                              variant={variant}/>;\n                    })()}\n                </Dialog>\n        );\n    }\n}\n\nconst styles = (theme: Theme): StyleRules => ({\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing.unit,\n        top: theme.spacing.unit\n    }\n});\nconst DownloadsDialog = withStyles(styles)(DownloadsDialogBase);\n\n\nexport default DownloadsDialog;\n"],"sourceRoot":""}