{"version":3,"sources":["stats/ui/DownloadChart.tsx","stats/ui/DownloadsDialog.tsx"],"names":["DownloadChart","onResize","dimensions","bounds","_this","setState","width","height","_this2","this","repositoryName","props","variant","columnName","variantLabel","downloadsDf","where","row","repository_name","setIndex","subset","data","x","getIndex","toArray","y","getSeries","type","react","dist_index_esm","_ref","measureRef","state","layout","title","xaxis","yaxis","ref","style","react_plotly_default","a","React","DialogTransition","index_es","Object","assign","direction","DownloadsDialogBase","repoChanged","event","target","value","variantChanged","prevProps","downloads","DataForge","values","parseDates","repoNames","distinct","sort","nameA","nameB","nameNormA","replace","nameNormB","localeCompare","open","classes","fullScreen","TransitionComponent","position","styles","theme","darkTheme","aria-label","className","closeButton","onClick","onClose","Close_default","htmlFor","onChange","inputProps","name","id","map","key","ui_DownloadChart","DownloadsDialog","withStyles","right","spacing","unit","top"],"mappings":"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","file":"static/js/6.21ee8890.chunk.js","sourcesContent":["import * as React from 'react';\nimport Plot from 'react-plotly.js';\nimport * as Plotly from 'plotly.js';\nimport { IDataFrame } from 'data-forge';\nimport Measure, { ContentRect } from 'react-measure';\n\ninterface DownloadChartProps {\n  downloadsDf: IDataFrame;\n\n  repositoryName: string;\n\n  variant: 'count' | 'delta';\n}\n\ninterface DownloadChartState {\n  width: number;\n\n  height: number;\n}\n\nclass DownloadChart extends React.Component<\n  DownloadChartProps,\n  DownloadChartState\n> {\n  onResize = (dimensions: ContentRect) => {\n    const bounds = dimensions.bounds;\n    if (!bounds) {\n      return;\n    }\n    this.setState({\n      width: bounds.width,\n      height: bounds.height,\n    });\n  };\n\n  render(): React.ReactNode {\n    const repositoryName = this.props.repositoryName;\n\n    const variant = this.props.variant;\n\n    const columnName =\n      variant === 'count' ? 'downloads_count' : 'downloads_delta';\n    const variantLabel =\n      variant === 'count' ? 'Download count' : 'Downloads / day';\n\n    const downloadsDf = this.props.downloadsDf\n      .where(row => row.repository_name === repositoryName)\n      .setIndex('data_at')\n      .subset([columnName]);\n\n    const data: Plotly.Data[] = [\n      {\n        x: downloadsDf.getIndex().toArray(),\n        y: downloadsDf.getSeries(columnName).toArray(),\n        type: 'scatter',\n      },\n    ];\n    return (\n      <Measure bounds onResize={this.onResize}>\n        {({ measureRef }) => {\n          const state: DownloadChartState = this.state || {\n            width: 800,\n            height: 600,\n          };\n          const layout: Partial<Plotly.Layout> = {\n            width: state.width,\n            height: state.height - 50,\n            title: repositoryName,\n            xaxis: { title: 'Date' },\n            yaxis: { title: variantLabel },\n          };\n          return (\n            <div ref={measureRef} style={{ height: '100%' }}>\n              <Plot data={data} layout={layout} />\n            </div>\n          );\n        }}\n      </Measure>\n    );\n  }\n}\n\nexport default DownloadChart;\n","import * as React from 'react';\nimport {\n  AppBar,\n  Dialog,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  MuiThemeProvider,\n  Select,\n  Slide,\n  Theme,\n  Toolbar,\n  withStyles,\n} from '@material-ui/core';\nimport { DownloadSnapshot } from '../model/DownloadSnapshot';\nimport * as DataForge from 'data-forge';\nimport { IDataFrame } from 'data-forge';\nimport DownloadChart from './DownloadChart';\nimport { darkTheme } from './App';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { StyleRules } from '@material-ui/core/styles';\n\ninterface DownloadsDialogProps {\n  repositoryName: string | null;\n\n  downloads: DownloadSnapshot[];\n\n  open: boolean;\n\n  onClose?: React.ReactEventHandler<{}>;\n\n  classes: any;\n}\n\ninterface DownloadsDialogState {\n  repositoryName?: string | null;\n\n  variant: 'count' | 'delta';\n}\n\nfunction DialogTransition(props: any) {\n  return <Slide direction=\"up\" {...props} />;\n}\n\nclass DownloadsDialogBase extends React.Component<\n  DownloadsDialogProps,\n  DownloadsDialogState\n> {\n  componentDidMount(): void {\n    this.setState({\n      repositoryName: this.props.repositoryName,\n      variant: 'count',\n    });\n  }\n\n  componentDidUpdate(prevProps: Readonly<DownloadsDialogProps>): void {\n    if (prevProps.repositoryName !== this.props.repositoryName) {\n      this.setState({\n        repositoryName: this.props.repositoryName,\n        variant: 'count',\n      });\n    }\n  }\n\n  repoChanged = (event: any) => {\n    const state = this.state;\n    if (!state) {\n      return;\n    }\n    const repositoryName: string = event.target.value;\n    const variant = state.variant;\n\n    this.setState({\n      repositoryName,\n      variant,\n    });\n  };\n\n  variantChanged = (event: any) => {\n    const state = this.state;\n    if (!state) {\n      return;\n    }\n    const repositoryName = state.repositoryName;\n    const variant: 'count' | 'delta' = event.target.value;\n\n    this.setState({\n      repositoryName,\n      variant,\n    });\n  };\n\n  render(): React.ReactNode {\n    const state = this.state;\n    if (!state) {\n      return <></>;\n    }\n\n    const downloads = this.props.downloads;\n\n    const repositoryName = state.repositoryName || '';\n    const variant = state.variant;\n\n    const downloadsDf: IDataFrame = new DataForge.DataFrame({\n      values: downloads,\n    }).parseDates(['data_at']);\n\n    const repoNames: string[] = downloadsDf\n      .getSeries('repository_name')\n      .distinct()\n      .toArray()\n      .sort((nameA: string, nameB: string): number => {\n        const nameNormA = nameA.replace('_', '-');\n        const nameNormB = nameB.replace('_', '-');\n        return nameNormA.localeCompare(nameNormB);\n      });\n\n    const open = this.props.open;\n\n    const classes: any = this.props.classes;\n\n    return (\n      <Dialog\n        open={open}\n        fullScreen={true}\n        TransitionComponent={DialogTransition}\n      >\n        <AppBar position=\"static\">\n          <Toolbar>\n            <MuiThemeProvider theme={darkTheme}>\n              <IconButton\n                aria-label=\"Close\"\n                className={classes.closeButton}\n                onClick={this.props.onClose}\n              >\n                <CloseIcon />\n              </IconButton>\n              <InputLabel htmlFor=\"repo\">Repository</InputLabel>&nbsp;\n              <Select\n                value={repositoryName}\n                onChange={this.repoChanged}\n                inputProps={{\n                  name: 'repo',\n                  id: 'repo',\n                }}\n              >\n                {repoNames.map(name => (\n                  <MenuItem key={name} value={name}>\n                    {name}\n                  </MenuItem>\n                ))}\n              </Select>\n              &nbsp;&nbsp;\n              <InputLabel htmlFor=\"variant\">View</InputLabel>&nbsp;\n              <Select\n                value={variant}\n                onChange={this.variantChanged}\n                inputProps={{\n                  name: 'variant',\n                  id: 'variant',\n                }}\n              >\n                <MenuItem value=\"count\">Download count</MenuItem>\n                <MenuItem value=\"delta\">Downloads / day</MenuItem>\n              </Select>\n            </MuiThemeProvider>\n          </Toolbar>\n        </AppBar>\n        {(() => {\n          if (!repositoryName) {\n            return <></>;\n          }\n          return (\n            <DownloadChart\n              downloadsDf={downloadsDf}\n              repositoryName={repositoryName}\n              variant={variant}\n            />\n          );\n        })()}\n      </Dialog>\n    );\n  }\n}\n\nconst styles = (theme: Theme): StyleRules => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing.unit,\n    top: theme.spacing.unit,\n  },\n});\nconst DownloadsDialog = withStyles(styles)(DownloadsDialogBase);\n\nexport default DownloadsDialog;\n"],"sourceRoot":""}